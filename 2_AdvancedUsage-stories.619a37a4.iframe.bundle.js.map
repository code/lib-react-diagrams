{"version":3,"file":"2_AdvancedUsage-stories.619a37a4.iframe.bundle.js","mappings":";;;;;;AAYA;;;;;ACGA;;;;AAIA;;;;;ACGA;;;;;;;;;AAWA;;;AAKA;;;AAGA;;;;AC3BA;;;AAKA;;;;;;;AAUA;;;;;;;;;;;;;;AAgBA","sources":["webpack://@projectstorm/react-diagrams-gallery/./demos/demo-drag-and-drop/components/TrayWidget.tsx","webpack://@projectstorm/react-diagrams-gallery/./demos/demo-drag-and-drop/components/TrayItemWidget.tsx","webpack://@projectstorm/react-diagrams-gallery/./demos/demo-drag-and-drop/components/BodyWidget.tsx","webpack://@projectstorm/react-diagrams-gallery/./demos/helpers/DemoWorkspaceWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Tray = styled.div`\n\t\tmin-width: 200px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t`;\n}\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <S.Tray>{this.props.children}</S.Tray>;\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n}\n\nnamespace S {\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin: 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-bottom: 2px;\n\t\tcursor: pointer;\n\t`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Tray\n\t\t\t\tcolor={this.props.color}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\"\n\t\t\t>\n\t\t\t\t{this.props.name}\n\t\t\t</S.Tray>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport _keys from 'lodash/keys';\nimport { TrayWidget } from './TrayWidget';\nimport { Application } from '../Application';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from '../../helpers/DemoCanvasWidget';\nimport styled from '@emotion/styled';\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nnamespace S {\n\texport const Body = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 100%;\n\t`;\n\n\texport const Header = styled.div`\n\t\tdisplay: flex;\n\t\tbackground: rgb(30, 30, 30);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial, sans-serif;\n\t\tpadding: 10px;\n\t\talign-items: center;\n\t`;\n\n\texport const Content = styled.div`\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t`;\n\n\texport const Layer = styled.div`\n\t\tposition: relative;\n\t\tflex-grow: 1;\n\t`;\n}\n\nexport class BodyWidget extends React.Component<BodyWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Body>\n\t\t\t\t<S.Header>\n\t\t\t\t\t<div className=\"title\">Storm React Diagrams - DnD demo</div>\n\t\t\t\t</S.Header>\n\t\t\t\t<S.Content>\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'in' }} name=\"In Node\" color=\"rgb(192,255,0)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'out' }} name=\"Out Node\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<S.Layer\n\t\t\t\t\t\tonDrop={(event) => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t\tvar nodesCount = _keys(this.props.app.getDiagramEngine().getModel().getNodes()).length;\n\n\t\t\t\t\t\t\tvar node: DefaultNodeModel = null;\n\t\t\t\t\t\t\tif (data.type === 'in') {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel('Node ' + (nodesCount + 1), 'rgb(192,255,0)');\n\t\t\t\t\t\t\t\tnode.addInPort('In');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel('Node ' + (nodesCount + 1), 'rgb(0,192,255)');\n\t\t\t\t\t\t\t\tnode.addOutPort('Out');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={(event) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DemoCanvasWidget>\n\t\t\t\t\t\t\t<CanvasWidget engine={this.props.app.getDiagramEngine()} />\n\t\t\t\t\t\t</DemoCanvasWidget>\n\t\t\t\t\t</S.Layer>\n\t\t\t\t</S.Content>\n\t\t\t</S.Body>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface DemoWorkspaceWidgetProps {\n\tbuttons?: any;\n}\n\nnamespace S {\n\texport const Toolbar = styled.div`\n\t\tpadding: 5px;\n\t\tdisplay: flex;\n\t\tflex-shrink: 0;\n\t`;\n\n\texport const Content = styled.div`\n\t\tflex-grow: 1;\n\t\theight: 100%;\n\t`;\n\n\texport const Container = styled.div`\n\t\tbackground: black;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\theight: 100%;\n\t\tborder-radius: 5px;\n\t\toverflow: hidden;\n\t`;\n}\n\nexport const DemoButton = styled.button`\n\tbackground: rgb(60, 60, 60);\n\tfont-size: 14px;\n\tpadding: 5px 10px;\n\tborder: none;\n\tcolor: white;\n\toutline: none;\n\tcursor: pointer;\n\tmargin: 2px;\n\tborder-radius: 3px;\n\n\t&:hover {\n\t\tbackground: rgb(0, 192, 255);\n\t}\n`;\n\nexport class DemoWorkspaceWidget extends React.Component<React.PropsWithChildren<DemoWorkspaceWidgetProps>> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Container>\n\t\t\t\t<S.Toolbar>{this.props.buttons}</S.Toolbar>\n\t\t\t\t<S.Content>{this.props.children}</S.Content>\n\t\t\t</S.Container>\n\t\t);\n\t}\n}\n"],"names":[],"sourceRoot":""}