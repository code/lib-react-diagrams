{"version":3,"file":"3_Customization-stories.8d19e21e.iframe.bundle.js","mappings":";;;AAmBA;;;;;;;;;;;ACIA","sources":["webpack://@projectstorm/react-diagrams-gallery/./demos/demo-custom-link-label/EditableLabelWidget.tsx","webpack://@projectstorm/react-diagrams-gallery/./demos/demo-custom-node1/DiamondNodeWidget.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport styled from '@emotion/styled';\nimport { action } from '@storybook/addon-actions';\n\nexport interface FlowAliasLabelWidgetProps {\n\tmodel: EditableLabelModel;\n}\n\nnamespace S {\n\t// NOTE: this CSS rules allows to interact with elements in label\n\texport const Label = styled.div`\n\t\tuser-select: none;\n\t\tpointer-events: auto;\n\t`;\n}\n\n// now we can render all what we want in the label\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = (props) => {\n\tconst [str, setStr] = React.useState(props.model.value);\n\n\treturn (\n\t\t<S.Label>\n\t\t\t<input\n\t\t\t\tvalue={str}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\tconst newVal = event.target.value;\n\n\t\t\t\t\t// update value both in internal component state\n\t\t\t\t\tsetStr(newVal);\n\t\t\t\t\t// and in model object\n\t\t\t\t\tprops.model.value = newVal;\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<button onClick={() => action('model eventDidFire')('You clicked the button')}>Click me!</button>\n\t\t</S.Label>\n\t);\n};\n","import * as React from 'react';\nimport { DiamondNodeModel } from './DiamondNodeModel';\nimport { DiagramEngine, PortModelAlignment, PortWidget } from '@projectstorm/react-diagrams';\nimport styled from '@emotion/styled';\n\nexport interface DiamondNodeWidgetProps {\n\tnode: DiamondNodeModel;\n\tengine: DiagramEngine;\n\tsize?: number;\n}\n\nnamespace S {\n\texport const Port = styled.div`\n\t\twidth: 16px;\n\t\theight: 16px;\n\t\tz-index: 10;\n\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\tborder-radius: 8px;\n\t\tcursor: pointer;\n\n\t\t&:hover {\n\t\t\tbackground: rgba(0, 0, 0, 1);\n\t\t}\n\t`;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DiamondNodeWidget extends React.Component<DiamondNodeWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={'diamond-node'}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\twidth: this.props.size,\n\t\t\t\t\theight: this.props.size\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\twidth={this.props.size}\n\t\t\t\t\theight={this.props.size}\n\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t__html:\n\t\t\t\t\t\t\t`\n          <g id=\"Layer_1\">\n          </g>\n          <g id=\"Layer_2\">\n            <polygon fill=\"mediumpurple\" stroke=\"${\n\t\t\t\t\t\t\tthis.props.node.isSelected() ? 'white' : '#000000'\n\t\t\t\t\t\t}\" stroke-width=\"3\" stroke-miterlimit=\"10\" points=\"10,` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t` ` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t`,10 ` +\n\t\t\t\t\t\t\t(this.props.size - 10) +\n\t\t\t\t\t\t\t`,` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t` ` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t`,` +\n\t\t\t\t\t\t\t(this.props.size - 10) +\n\t\t\t\t\t\t\t` \"/>\n          </g>\n        `\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttop: this.props.size / 2 - 8,\n\t\t\t\t\t\tleft: -8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.LEFT)}\n\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size / 2 - 8,\n\t\t\t\t\t\ttop: -8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.TOP)}\n\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size - 8,\n\t\t\t\t\t\ttop: this.props.size / 2 - 8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.RIGHT)}\n\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size / 2 - 8,\n\t\t\t\t\t\ttop: this.props.size - 8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.BOTTOM)}\n\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t</div>\n\t\t);\n\t}\n}\n"],"names":[],"sourceRoot":""}